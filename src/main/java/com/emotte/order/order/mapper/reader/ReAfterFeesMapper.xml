<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper 
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" 
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"> 

<mapper namespace="com.emotte.order.order.mapper.reader.ReAfterFeesMapper">
	<select id="loadAfterFees" parameterType="java.lang.Long" resultType="com.emotte.order.order.model.AfterFees">
		select 
			ID as id ,		
			TYPE as type ,		
			PAYFEE_ID as payfeeId ,		
			FEE_MONEY as feeMoney ,		
			CREATE_BY as createBy ,		
			UPDATE_BY as updateBy ,		
			to_cahr(CREATE_TIME,'yyyy-mm-dd hh24:mi:ss') as createTime ,		
			to_cahr(UPDATE_TIME,'yyyy-mm-dd hh24:mi:ss') as updateTime ,		
			VALID as valid ,		
			VERSION as version ,		
			LOG as log,
			STATUS as status		
		from t_order_after_fees
		where id=#{id}
	</select>
	
	<select id="queryAfterFees"  parameterType="com.emotte.order.order.model.AfterFees" resultType="com.emotte.order.order.model.AfterFees">
	select
			ID as id ,		
			TYPE as type ,		
			PAYFEE_ID as payfeeId ,		
			FEE_MONEY as feeMoney ,		
			CREATE_BY as createBy ,		
			UPDATE_BY as updateBy ,		
			to_cahr(CREATE_TIME,'yyyy-mm-dd hh24:mi:ss') as createTime ,		
			to_cahr(UPDATE_TIME,'yyyy-mm-dd hh24:mi:ss') as updateTime ,		
			VALID as valid ,		
			VERSION as version ,		
			LOG as log,
			STATUS as status	
	from  t_order_after_fees
	<where> 
	 1 = 1
		<if test="id!=null and id!='' ">           
			and	ID =  #{id} 		
		</if>	
		<if test="type!=null and type!='' ">           
			and	TYPE =  #{type} 		
		</if>	
		<if test="payfeeId!=null and payfeeId!='' ">           
			and	PAYFEE_ID =  #{payfeeId} 		
		</if>	
		<if test="feeMoney!=null and feeMoney!='' ">           
			and	FEE_MONEY =  #{feeMoney} 		
		</if>	
		<if test="createBy!=null and createBy!='' ">           
			and	CREATE_BY =  #{createBy} 		
		</if>	
		<if test="updateBy!=null and updateBy!='' ">           
			and	UPDATE_BY =  #{updateBy} 		
		</if>	
		<if test="createTime!=null and createTime!='' ">           
			and	CREATE_TIME =  to_date(#{createTime},'yyyy-mm-dd hh24:mi:ss') 		
		</if>	
		<if test="updateTime!=null and updateTime!='' ">           
			and	UPDATE_TIME =  to_date(#{updateTime} ,'yyyy-mm-dd hh24:mi:ss')		
		</if>	
		<if test="valid!=null and valid!='' ">           
			and	VALID =  #{valid} 		
		</if>	
		<if test="version!=null and version!='' ">           
			and	VERSION =  #{version} 		
		</if>	
		<if test="log!=null and log!='' ">           
			and	LOG =  #{log} 		
		</if>
		<if test="status!=null and status!='' ">           
			and	STATUS =  #{status} 		
		</if>	
	</where>
	order by CREATE_TIME DESC,ID DESC
	</select>
	
	
	<select id="countAfterFees"  parameterType="com.emotte.order.order.model.AfterFees" resultType="java.lang.Integer">
		SELECT count(0) 
		FROM t_order_after_fees
		<where> 
	         1 = 1
		<if test="id!=null and id!='' ">           
			and	ID =  #{id} 		
		</if>	
		<if test="type!=null and type!='' ">           
			and	TYPE =  #{type} 		
		</if>	
		<if test="payfeeId!=null and payfeeId!='' ">           
			and	PAYFEE_ID =  #{payfeeId} 		
		</if>	
		<if test="feeMoney!=null and feeMoney!='' ">           
			and	FEE_MONEY =  #{feeMoney} 		
		</if>	
		<if test="createBy!=null and createBy!='' ">           
			and	CREATE_BY =  #{createBy} 		
		</if>	
		<if test="updateBy!=null and updateBy!='' ">           
			and	UPDATE_BY =  #{updateBy} 		
		</if>	
		<if test="createTime!=null and createTime!='' ">           
			and	CREATE_TIME =  to_date(#{createTime},'yyyy-mm-dd hh24:mi:ss') 		
		</if>	
		<if test="updateTime!=null and updateTime!='' ">           
			and	UPDATE_TIME =  to_date(#{updateTime} ,'yyyy-mm-dd hh24:mi:ss')		
		</if>	
		<if test="valid!=null and valid!='' ">           
			and	VALID =  #{valid} 		
		</if>	
		<if test="version!=null and version!='' ">           
			and	VERSION =  #{version} 		
		</if>	
		<if test="log!=null and log!='' ">           
			and	LOG =  #{log} 		
		</if>	
		<if test="status!=null and status!='' ">           
			and	STATUS =  #{status} 		
		</if>
			</where>
	</select>
	
	<select id="queryPayMoney" resultType="com.emotte.order.order.model.AfterFees" parameterType="com.emotte.order.order.model.AfterFees">
			SELECT nvl(t.service_money*6*0.01,0) as payfeeMoney,t.*, t.rowid
			  FROM t_order_agreement t
			 WHERE t.order_id =#{orderId} and t.agreement_state=2
	</select>
	
	<select id="queryAccountPay" resultType="com.emotte.order.order.model.Payfee" parameterType="com.emotte.order.order.model.AfterFees">
			select nvl(sum(tp.fee_sum),0) as feeSum
			  from t_account_pay t
			  join t_order_payfee tp
			    on t.id = tp.order_id
			 where t.pay_type = 10
			   and tp.split_status = 1
			   and t.order_id = #{orderId}
	</select>
	
	<select id="queryMembershipFee" resultType="com.emotte.order.order.model.AfterFees" parameterType="com.emotte.order.order.model.AfterFees">
			  
                SELECT d.payfee_id as payfeeId,
	              SUM(decode(d.btype, 103, d.money, 0)) as feeSumA,
	              SUM(decode(d.btype, 105, d.money, 0)) as feeSumB,
	              SUM(decode(d.btype, 103, d.money, 0))- SUM(decode(d.btype, 105, d.money, 0)) as feeSumC,
	              1 as type  
                  FROM t_account_pay t
                  JOIN t_payfee_detail d
                    ON t.order_id = d.top_id
                 WHERE t.valid = 1
                   and d.valid=1
                   AND t.pay_type = 6
                   AND t.order_id = #{orderId}
                   AND d.btype IN (103, 105)
                 GROUP BY d.payfee_id 
	</select>
	
	<select id="queryNotIousSalaryMoney" resultType="com.emotte.order.order.model.AfterFees" parameterType="com.emotte.order.order.model.AfterFees">
							WITH feeAll AS
								 (SELECT pf.id, pf.fee_sum
								    FROM t_order o
								    JOIN t_account_pay ap
								      ON o.id = ap.order_id
								    JOIN t_order_payfee pf
								      ON pf.order_id = ap.id
								   WHERE o.valid = 1
								     AND ap.valid = 1
								     AND pf.valid = 1
								     AND ap.is_back_type = 2
								     AND pf.account_status = 1
								     AND pf.split_status = 1
								     AND pf.fee_post NOT IN
								         (20250027, 20250016, 20250028, 20250031, 20250033)
								     AND ap.pay_type IN (1, 3, 7)
								     AND o.id = #{orderId}),
								feeDe AS
								 (SELECT t.id, SUM(nvl(s.money, 0)) AS money
								    FROM t_payfee_detail s
								   INNER JOIN emerp.t_order_payfee t
								      ON s.payfee_id = t.id
								     AND t.valid = 1
								     AND s.valid = 1
								     AND t.account_status = 1
								     AND t.split_status = 1
								     AND t.fee_post NOT IN
								         (20250027, 20250016, 20250028, 20250031, 20250033)
								   WHERE s.btype IN (102, 103, 104, 106, 110, 111, 114)
								     AND s.top_id = #{orderId}
								   GROUP BY t.id)
								SELECT a.id AS payfeeId,
								       a.fee_sum AS feeSumA,
								       nvl(d.money, 0) AS feeSumB,
								       a.fee_sum - nvl(d.money, 0) AS feeSumC,
								       2 as type
								  FROM feeAll a
								  LEFT JOIN feeDe d
								    ON a.id = d.id
	</select>
	
	<select id="queryInstallmentFee" resultType="com.emotte.order.order.model.AfterFees" parameterType="com.emotte.order.order.model.AfterFees">
				WITH temp AS
				 (SELECT op.id,
				         SUM(NVL(op.fee_sum, 0)) AS total,
				         (SELECT 12 FROM dual) AS a_count,
				         (SELECT nvl(COUNT(1), 0) + 1
				            FROM (SELECT t.order_month, t.order_id
				                    FROM t_emp_salary t
				                   WHERE t.is_old_data IS NULL
				                     AND t.valid = 1
				                     AND t.state != 10
				                     AND t.order_month IS NOT NULL
				                     AND t.order_id = #{orderId}
				                   GROUP BY t.order_id, t.order_month)) AS b_count
				    FROM t_account_pay ap
				    JOIN t_order_payfee op
				      ON op.order_id = ap.id
				   WHERE ap.valid = 1
				     AND op.valid = 1
				     AND ap.pay_type = 8
				     AND ap.order_id = #{orderId}
				   GROUP BY op.id)
				SELECT t.id as  payfeeId,
				       t.total as feeSumA,
				       round(t.total / t.a_count * t.b_count, 2) as feeSumB,
				       round(t.total - round(t.total / t.a_count * t.b_count, 2), 2) as feeSumC,
				       3 as type
				   FROM temp t
	</select>
</mapper>